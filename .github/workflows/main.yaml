name: main

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
      - name: Install dependencies
        run: npm install
        
        name: Apply all pending migrations to the database
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - uses: actions/checkout@v3
        # network
      - name: create tune network
        run: docker network create tune
        continue-on-error: true

        # db
      # - name: run db
      #   run: docker run -d --name db -v db:/var/lib/postgresql/data -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" -e POSTGRES_DB="${{ secrets.POSTGRES_DB }}" postgres:16.2-alpine3.19

      # - name: connect db to tune network
      #   run: docker network connect tune db

      # client
      - name: stop client container
        run: docker stop tune-c
        continue-on-error: true

      - name: remove client container
        run: docker rm tune-c
        continue-on-error: true

      - name: remove client image
        run: docker rmi tune-client-production
        continue-on-error: true

      - name: build client
        run: docker build -t tune-client-production -f ./client/Dockerfile.prod --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" --build-arg GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }} --build-arg GH_ID=${{ secrets.GH_ID }} --build-arg GH_SECRET=${{ secrets.GH_SECRET }} --build-arg NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} --build-arg MUSIC_SERVICE_CONTAINER=${{ secrets.MUSIC_SERVICE_CONTAINER }} .

      - name: run client
        run: docker run -it -d --name tune-c -p 3000:3000 tune-client-production

      - name: connect client to tune network
        run: docker network connect tune tune-c

      # music sevice
      - name: stop music-service container
        run: docker stop tune-ms
        continue-on-error: true

      - name: remove music-service container
        run: docker rm tune-ms
        continue-on-error: true

      - name: remove music-service image
        run: docker rmi tune-ms-production
        continue-on-error: true

      - name: build music-service
        run: docker build -t tune-ms-production -f ./music-service/Dockerfile.prod .

      - name: run music-service
        run: docker run -it -d --name tune-ms -p 8000:8000 tune-ms-production

      - name: connect music-service to tune network
        run: docker network connect tune tune-ms
